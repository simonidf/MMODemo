// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoTest {

  /// <summary>Holder for reflection information generated from msg2.proto</summary>
  public static partial class Msg2Reflection {

    #region Descriptor
    /// <summary>File descriptor for msg2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Msg2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgptc2cyLnByb3RvEglQcm90b1Rlc3QiKQoJU2tpbGxJbmZvEgsKA3BpZBgB",
            "IAEoBRIPCgdza2lsbGlkGAIgASgFIkQKCkJ1bGxldEJvcm4SCgoCaWQYASAB",
            "KAISCQoBeBgCIAEoAhIJCgF5GAMgASgCEgkKAXoYBCABKAISCQoBdhgFIAEo",
            "AiJVCgpCdWxsZXRNb3ZlEgoKAmlkGAEgASgCEgkKAXgYAiABKAISCQoBeRgD",
            "IAEoAhIJCgF6GAQgASgCEgkKAXYYBSABKAISDwoHZGVsZXRlZBgGIAEoCCIb",
            "CgxBdHRhY2tBY3Rpb24SCwoDcGlkGAEgASgFIiEKA0hpdBINCgVoaXRIcBgB",
            "IAEoBRILCgNwaWQYAiABKAUiUwoKUGxheWVySW5mbxILCgNwaWQYASABKAUS",
            "CQoBeBgCIAEoAhIJCgF5GAMgASgCEgkKAXoYBCABKAISCQoBdhgFIAEoAhIM",
            "CgRkZWFkGAYgASgIIlIKB09iakluZm8SCgoCaWQYASABKAUSCQoBeBgCIAEo",
            "AhIJCgF5GAMgASgCEgkKAXoYBCABKAISCQoBdhgFIAEoAhIPCgdkZWxldGVk",
            "GAYgASgIIlcKDFNraWxsT2JqSW5mbxIKCgJpZBgBIAEoBRIJCgF4GAIgASgC",
            "EgkKAXkYAyABKAISCQoBehgEIAEoAhIJCgF2GAUgASgCEg8KB2RlbGV0ZWQY",
            "BiABKAgiiQUKCUZyYW1lSW5mbxIoCgluZXdQbGF5ZXIYASADKAsyFS5Qcm90",
            "b1Rlc3QuUGxheWVySW5mbxIpCgpwbGF5ZXJNb3ZlGAIgAygLMhUuUHJvdG9U",
            "ZXN0LlBsYXllckluZm8SKQoKcGxheWVyRGVhZBgDIAMoCzIVLlByb3RvVGVz",
            "dC5QbGF5ZXJJbmZvEi0KDGF0dGFja0FjdGlvbhgEIAMoCzIXLlByb3RvVGVz",
            "dC5BdHRhY2tBY3Rpb24SGwoDaGl0GAUgAygLMg4uUHJvdG9UZXN0LkhpdBIq",
            "Cgxza2lsbFByZXBhcmUYBiADKAsyFC5Qcm90b1Rlc3QuU2tpbGxJbmZvEikK",
            "C3NraWxsQ2FuY2VsGAcgAygLMhQuUHJvdG9UZXN0LlNraWxsSW5mbxIqCgxz",
            "a2lsbFN0YXJ0VXAYCCADKAsyFC5Qcm90b1Rlc3QuU2tpbGxJbmZvEisKDHBs",
            "YXllclJlbGlmZRgJIAMoCzIVLlByb3RvVGVzdC5QbGF5ZXJJbmZvEiMKB29i",
            "akJvcm4YCiADKAsyEi5Qcm90b1Rlc3QuT2JqSW5mbxIjCgdvYmpNb3ZlGAsg",
            "AygLMhIuUHJvdG9UZXN0Lk9iakluZm8SJgoKb2JqRGVsZXRlZBgMIAMoCzIS",
            "LlByb3RvVGVzdC5PYmpJbmZvEi0KDHNraWxsT2JqQm9ybhgNIAMoCzIXLlBy",
            "b3RvVGVzdC5Ta2lsbE9iakluZm8SLQoMc2tpbGxPYmpNb3ZlGA4gAygLMhcu",
            "UHJvdG9UZXN0LlNraWxsT2JqSW5mbxIwCg9za2lsbE9iakRlbGV0ZWQYDyAD",
            "KAsyFy5Qcm90b1Rlc3QuU2tpbGxPYmpJbmZvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.SkillInfo), global::ProtoTest.SkillInfo.Parser, new[]{ "Pid", "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.BulletBorn), global::ProtoTest.BulletBorn.Parser, new[]{ "Id", "X", "Y", "Z", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.BulletMove), global::ProtoTest.BulletMove.Parser, new[]{ "Id", "X", "Y", "Z", "V", "Deleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.AttackAction), global::ProtoTest.AttackAction.Parser, new[]{ "Pid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.Hit), global::ProtoTest.Hit.Parser, new[]{ "HitHp", "Pid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.PlayerInfo), global::ProtoTest.PlayerInfo.Parser, new[]{ "Pid", "X", "Y", "Z", "V", "Dead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.ObjInfo), global::ProtoTest.ObjInfo.Parser, new[]{ "Id", "X", "Y", "Z", "V", "Deleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.SkillObjInfo), global::ProtoTest.SkillObjInfo.Parser, new[]{ "Id", "X", "Y", "Z", "V", "Deleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoTest.FrameInfo), global::ProtoTest.FrameInfo.Parser, new[]{ "NewPlayer", "PlayerMove", "PlayerDead", "AttackAction", "Hit", "SkillPrepare", "SkillCancel", "SkillStartUp", "PlayerRelife", "ObjBorn", "ObjMove", "ObjDeleted", "SkillObjBorn", "SkillObjMove", "SkillObjDeleted" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      pid_ = other.pid_;
      skillid_ = other.skillid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private int skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Skillid != other.Skillid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            Skillid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletBorn : pb::IMessage<BulletBorn> {
    private static readonly pb::MessageParser<BulletBorn> _parser = new pb::MessageParser<BulletBorn>(() => new BulletBorn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletBorn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletBorn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletBorn(BulletBorn other) : this() {
      id_ = other.id_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletBorn Clone() {
      return new BulletBorn(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private float id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 5;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletBorn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletBorn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0F) hash ^= Id.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletBorn other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0F) {
        Id = other.Id;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletMove : pb::IMessage<BulletMove> {
    private static readonly pb::MessageParser<BulletMove> _parser = new pb::MessageParser<BulletMove>(() => new BulletMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletMove(BulletMove other) : this() {
      id_ = other.id_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
      deleted_ = other.deleted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletMove Clone() {
      return new BulletMove(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private float id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 5;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 6;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (V != other.V) return false;
      if (Deleted != other.Deleted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0F) hash ^= Id.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(V);
      }
      if (Deleted != false) {
        output.WriteRawTag(48);
        output.WriteBool(Deleted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (Deleted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletMove other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0F) {
        Id = other.Id;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Id = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            V = input.ReadFloat();
            break;
          }
          case 48: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackAction : pb::IMessage<AttackAction> {
    private static readonly pb::MessageParser<AttackAction> _parser = new pb::MessageParser<AttackAction>(() => new AttackAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackAction(AttackAction other) : this() {
      pid_ = other.pid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackAction Clone() {
      return new AttackAction(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackAction other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hit : pb::IMessage<Hit> {
    private static readonly pb::MessageParser<Hit> _parser = new pb::MessageParser<Hit>(() => new Hit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit(Hit other) : this() {
      hitHp_ = other.hitHp_;
      pid_ = other.pid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit Clone() {
      return new Hit(this);
    }

    /// <summary>Field number for the "hitHp" field.</summary>
    public const int HitHpFieldNumber = 1;
    private int hitHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitHp {
      get { return hitHp_; }
      set {
        hitHp_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitHp != other.HitHp) return false;
      if (Pid != other.Pid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitHp != 0) hash ^= HitHp.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitHp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitHp);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitHp);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hit other) {
      if (other == null) {
        return;
      }
      if (other.HitHp != 0) {
        HitHp = other.HitHp;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HitHp = input.ReadInt32();
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      pid_ = other.pid_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
      dead_ = other.dead_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 5;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 6;
    private bool dead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { return dead_; }
      set {
        dead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (V != other.V) return false;
      if (Dead != other.Dead) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      if (Dead != false) hash ^= Dead.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(V);
      }
      if (Dead != false) {
        output.WriteRawTag(48);
        output.WriteBool(Dead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (Dead != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.Dead != false) {
        Dead = other.Dead;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            V = input.ReadFloat();
            break;
          }
          case 48: {
            Dead = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjInfo : pb::IMessage<ObjInfo> {
    private static readonly pb::MessageParser<ObjInfo> _parser = new pb::MessageParser<ObjInfo>(() => new ObjInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjInfo(ObjInfo other) : this() {
      id_ = other.id_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
      deleted_ = other.deleted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjInfo Clone() {
      return new ObjInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 5;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 6;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (V != other.V) return false;
      if (Deleted != other.Deleted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(V);
      }
      if (Deleted != false) {
        output.WriteRawTag(48);
        output.WriteBool(Deleted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (Deleted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            V = input.ReadFloat();
            break;
          }
          case 48: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillObjInfo : pb::IMessage<SkillObjInfo> {
    private static readonly pb::MessageParser<SkillObjInfo> _parser = new pb::MessageParser<SkillObjInfo>(() => new SkillObjInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillObjInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillObjInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillObjInfo(SkillObjInfo other) : this() {
      id_ = other.id_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
      deleted_ = other.deleted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillObjInfo Clone() {
      return new SkillObjInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 5;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 6;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillObjInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillObjInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (V != other.V) return false;
      if (Deleted != other.Deleted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (V != 0F) hash ^= V.GetHashCode();
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(V);
      }
      if (Deleted != false) {
        output.WriteRawTag(48);
        output.WriteBool(Deleted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (Deleted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillObjInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            V = input.ReadFloat();
            break;
          }
          case 48: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameInfo : pb::IMessage<FrameInfo> {
    private static readonly pb::MessageParser<FrameInfo> _parser = new pb::MessageParser<FrameInfo>(() => new FrameInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoTest.Msg2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo(FrameInfo other) : this() {
      newPlayer_ = other.newPlayer_.Clone();
      playerMove_ = other.playerMove_.Clone();
      playerDead_ = other.playerDead_.Clone();
      attackAction_ = other.attackAction_.Clone();
      hit_ = other.hit_.Clone();
      skillPrepare_ = other.skillPrepare_.Clone();
      skillCancel_ = other.skillCancel_.Clone();
      skillStartUp_ = other.skillStartUp_.Clone();
      playerRelife_ = other.playerRelife_.Clone();
      objBorn_ = other.objBorn_.Clone();
      objMove_ = other.objMove_.Clone();
      objDeleted_ = other.objDeleted_.Clone();
      skillObjBorn_ = other.skillObjBorn_.Clone();
      skillObjMove_ = other.skillObjMove_.Clone();
      skillObjDeleted_ = other.skillObjDeleted_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameInfo Clone() {
      return new FrameInfo(this);
    }

    /// <summary>Field number for the "newPlayer" field.</summary>
    public const int NewPlayerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ProtoTest.PlayerInfo> _repeated_newPlayer_codec
        = pb::FieldCodec.ForMessage(10, global::ProtoTest.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.PlayerInfo> newPlayer_ = new pbc::RepeatedField<global::ProtoTest.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.PlayerInfo> NewPlayer {
      get { return newPlayer_; }
    }

    /// <summary>Field number for the "playerMove" field.</summary>
    public const int PlayerMoveFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ProtoTest.PlayerInfo> _repeated_playerMove_codec
        = pb::FieldCodec.ForMessage(18, global::ProtoTest.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.PlayerInfo> playerMove_ = new pbc::RepeatedField<global::ProtoTest.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.PlayerInfo> PlayerMove {
      get { return playerMove_; }
    }

    /// <summary>Field number for the "playerDead" field.</summary>
    public const int PlayerDeadFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ProtoTest.PlayerInfo> _repeated_playerDead_codec
        = pb::FieldCodec.ForMessage(26, global::ProtoTest.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.PlayerInfo> playerDead_ = new pbc::RepeatedField<global::ProtoTest.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.PlayerInfo> PlayerDead {
      get { return playerDead_; }
    }

    /// <summary>Field number for the "attackAction" field.</summary>
    public const int AttackActionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ProtoTest.AttackAction> _repeated_attackAction_codec
        = pb::FieldCodec.ForMessage(34, global::ProtoTest.AttackAction.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.AttackAction> attackAction_ = new pbc::RepeatedField<global::ProtoTest.AttackAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.AttackAction> AttackAction {
      get { return attackAction_; }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ProtoTest.Hit> _repeated_hit_codec
        = pb::FieldCodec.ForMessage(42, global::ProtoTest.Hit.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.Hit> hit_ = new pbc::RepeatedField<global::ProtoTest.Hit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.Hit> Hit {
      get { return hit_; }
    }

    /// <summary>Field number for the "skillPrepare" field.</summary>
    public const int SkillPrepareFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillInfo> _repeated_skillPrepare_codec
        = pb::FieldCodec.ForMessage(50, global::ProtoTest.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillInfo> skillPrepare_ = new pbc::RepeatedField<global::ProtoTest.SkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillInfo> SkillPrepare {
      get { return skillPrepare_; }
    }

    /// <summary>Field number for the "skillCancel" field.</summary>
    public const int SkillCancelFieldNumber = 7;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillInfo> _repeated_skillCancel_codec
        = pb::FieldCodec.ForMessage(58, global::ProtoTest.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillInfo> skillCancel_ = new pbc::RepeatedField<global::ProtoTest.SkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillInfo> SkillCancel {
      get { return skillCancel_; }
    }

    /// <summary>Field number for the "skillStartUp" field.</summary>
    public const int SkillStartUpFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillInfo> _repeated_skillStartUp_codec
        = pb::FieldCodec.ForMessage(66, global::ProtoTest.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillInfo> skillStartUp_ = new pbc::RepeatedField<global::ProtoTest.SkillInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillInfo> SkillStartUp {
      get { return skillStartUp_; }
    }

    /// <summary>Field number for the "playerRelife" field.</summary>
    public const int PlayerRelifeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::ProtoTest.PlayerInfo> _repeated_playerRelife_codec
        = pb::FieldCodec.ForMessage(74, global::ProtoTest.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.PlayerInfo> playerRelife_ = new pbc::RepeatedField<global::ProtoTest.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.PlayerInfo> PlayerRelife {
      get { return playerRelife_; }
    }

    /// <summary>Field number for the "objBorn" field.</summary>
    public const int ObjBornFieldNumber = 10;
    private static readonly pb::FieldCodec<global::ProtoTest.ObjInfo> _repeated_objBorn_codec
        = pb::FieldCodec.ForMessage(82, global::ProtoTest.ObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.ObjInfo> objBorn_ = new pbc::RepeatedField<global::ProtoTest.ObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.ObjInfo> ObjBorn {
      get { return objBorn_; }
    }

    /// <summary>Field number for the "objMove" field.</summary>
    public const int ObjMoveFieldNumber = 11;
    private static readonly pb::FieldCodec<global::ProtoTest.ObjInfo> _repeated_objMove_codec
        = pb::FieldCodec.ForMessage(90, global::ProtoTest.ObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.ObjInfo> objMove_ = new pbc::RepeatedField<global::ProtoTest.ObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.ObjInfo> ObjMove {
      get { return objMove_; }
    }

    /// <summary>Field number for the "objDeleted" field.</summary>
    public const int ObjDeletedFieldNumber = 12;
    private static readonly pb::FieldCodec<global::ProtoTest.ObjInfo> _repeated_objDeleted_codec
        = pb::FieldCodec.ForMessage(98, global::ProtoTest.ObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.ObjInfo> objDeleted_ = new pbc::RepeatedField<global::ProtoTest.ObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.ObjInfo> ObjDeleted {
      get { return objDeleted_; }
    }

    /// <summary>Field number for the "skillObjBorn" field.</summary>
    public const int SkillObjBornFieldNumber = 13;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillObjInfo> _repeated_skillObjBorn_codec
        = pb::FieldCodec.ForMessage(106, global::ProtoTest.SkillObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillObjInfo> skillObjBorn_ = new pbc::RepeatedField<global::ProtoTest.SkillObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillObjInfo> SkillObjBorn {
      get { return skillObjBorn_; }
    }

    /// <summary>Field number for the "skillObjMove" field.</summary>
    public const int SkillObjMoveFieldNumber = 14;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillObjInfo> _repeated_skillObjMove_codec
        = pb::FieldCodec.ForMessage(114, global::ProtoTest.SkillObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillObjInfo> skillObjMove_ = new pbc::RepeatedField<global::ProtoTest.SkillObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillObjInfo> SkillObjMove {
      get { return skillObjMove_; }
    }

    /// <summary>Field number for the "skillObjDeleted" field.</summary>
    public const int SkillObjDeletedFieldNumber = 15;
    private static readonly pb::FieldCodec<global::ProtoTest.SkillObjInfo> _repeated_skillObjDeleted_codec
        = pb::FieldCodec.ForMessage(122, global::ProtoTest.SkillObjInfo.Parser);
    private readonly pbc::RepeatedField<global::ProtoTest.SkillObjInfo> skillObjDeleted_ = new pbc::RepeatedField<global::ProtoTest.SkillObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoTest.SkillObjInfo> SkillObjDeleted {
      get { return skillObjDeleted_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!newPlayer_.Equals(other.newPlayer_)) return false;
      if(!playerMove_.Equals(other.playerMove_)) return false;
      if(!playerDead_.Equals(other.playerDead_)) return false;
      if(!attackAction_.Equals(other.attackAction_)) return false;
      if(!hit_.Equals(other.hit_)) return false;
      if(!skillPrepare_.Equals(other.skillPrepare_)) return false;
      if(!skillCancel_.Equals(other.skillCancel_)) return false;
      if(!skillStartUp_.Equals(other.skillStartUp_)) return false;
      if(!playerRelife_.Equals(other.playerRelife_)) return false;
      if(!objBorn_.Equals(other.objBorn_)) return false;
      if(!objMove_.Equals(other.objMove_)) return false;
      if(!objDeleted_.Equals(other.objDeleted_)) return false;
      if(!skillObjBorn_.Equals(other.skillObjBorn_)) return false;
      if(!skillObjMove_.Equals(other.skillObjMove_)) return false;
      if(!skillObjDeleted_.Equals(other.skillObjDeleted_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= newPlayer_.GetHashCode();
      hash ^= playerMove_.GetHashCode();
      hash ^= playerDead_.GetHashCode();
      hash ^= attackAction_.GetHashCode();
      hash ^= hit_.GetHashCode();
      hash ^= skillPrepare_.GetHashCode();
      hash ^= skillCancel_.GetHashCode();
      hash ^= skillStartUp_.GetHashCode();
      hash ^= playerRelife_.GetHashCode();
      hash ^= objBorn_.GetHashCode();
      hash ^= objMove_.GetHashCode();
      hash ^= objDeleted_.GetHashCode();
      hash ^= skillObjBorn_.GetHashCode();
      hash ^= skillObjMove_.GetHashCode();
      hash ^= skillObjDeleted_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      newPlayer_.WriteTo(output, _repeated_newPlayer_codec);
      playerMove_.WriteTo(output, _repeated_playerMove_codec);
      playerDead_.WriteTo(output, _repeated_playerDead_codec);
      attackAction_.WriteTo(output, _repeated_attackAction_codec);
      hit_.WriteTo(output, _repeated_hit_codec);
      skillPrepare_.WriteTo(output, _repeated_skillPrepare_codec);
      skillCancel_.WriteTo(output, _repeated_skillCancel_codec);
      skillStartUp_.WriteTo(output, _repeated_skillStartUp_codec);
      playerRelife_.WriteTo(output, _repeated_playerRelife_codec);
      objBorn_.WriteTo(output, _repeated_objBorn_codec);
      objMove_.WriteTo(output, _repeated_objMove_codec);
      objDeleted_.WriteTo(output, _repeated_objDeleted_codec);
      skillObjBorn_.WriteTo(output, _repeated_skillObjBorn_codec);
      skillObjMove_.WriteTo(output, _repeated_skillObjMove_codec);
      skillObjDeleted_.WriteTo(output, _repeated_skillObjDeleted_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += newPlayer_.CalculateSize(_repeated_newPlayer_codec);
      size += playerMove_.CalculateSize(_repeated_playerMove_codec);
      size += playerDead_.CalculateSize(_repeated_playerDead_codec);
      size += attackAction_.CalculateSize(_repeated_attackAction_codec);
      size += hit_.CalculateSize(_repeated_hit_codec);
      size += skillPrepare_.CalculateSize(_repeated_skillPrepare_codec);
      size += skillCancel_.CalculateSize(_repeated_skillCancel_codec);
      size += skillStartUp_.CalculateSize(_repeated_skillStartUp_codec);
      size += playerRelife_.CalculateSize(_repeated_playerRelife_codec);
      size += objBorn_.CalculateSize(_repeated_objBorn_codec);
      size += objMove_.CalculateSize(_repeated_objMove_codec);
      size += objDeleted_.CalculateSize(_repeated_objDeleted_codec);
      size += skillObjBorn_.CalculateSize(_repeated_skillObjBorn_codec);
      size += skillObjMove_.CalculateSize(_repeated_skillObjMove_codec);
      size += skillObjDeleted_.CalculateSize(_repeated_skillObjDeleted_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameInfo other) {
      if (other == null) {
        return;
      }
      newPlayer_.Add(other.newPlayer_);
      playerMove_.Add(other.playerMove_);
      playerDead_.Add(other.playerDead_);
      attackAction_.Add(other.attackAction_);
      hit_.Add(other.hit_);
      skillPrepare_.Add(other.skillPrepare_);
      skillCancel_.Add(other.skillCancel_);
      skillStartUp_.Add(other.skillStartUp_);
      playerRelife_.Add(other.playerRelife_);
      objBorn_.Add(other.objBorn_);
      objMove_.Add(other.objMove_);
      objDeleted_.Add(other.objDeleted_);
      skillObjBorn_.Add(other.skillObjBorn_);
      skillObjMove_.Add(other.skillObjMove_);
      skillObjDeleted_.Add(other.skillObjDeleted_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            newPlayer_.AddEntriesFrom(input, _repeated_newPlayer_codec);
            break;
          }
          case 18: {
            playerMove_.AddEntriesFrom(input, _repeated_playerMove_codec);
            break;
          }
          case 26: {
            playerDead_.AddEntriesFrom(input, _repeated_playerDead_codec);
            break;
          }
          case 34: {
            attackAction_.AddEntriesFrom(input, _repeated_attackAction_codec);
            break;
          }
          case 42: {
            hit_.AddEntriesFrom(input, _repeated_hit_codec);
            break;
          }
          case 50: {
            skillPrepare_.AddEntriesFrom(input, _repeated_skillPrepare_codec);
            break;
          }
          case 58: {
            skillCancel_.AddEntriesFrom(input, _repeated_skillCancel_codec);
            break;
          }
          case 66: {
            skillStartUp_.AddEntriesFrom(input, _repeated_skillStartUp_codec);
            break;
          }
          case 74: {
            playerRelife_.AddEntriesFrom(input, _repeated_playerRelife_codec);
            break;
          }
          case 82: {
            objBorn_.AddEntriesFrom(input, _repeated_objBorn_codec);
            break;
          }
          case 90: {
            objMove_.AddEntriesFrom(input, _repeated_objMove_codec);
            break;
          }
          case 98: {
            objDeleted_.AddEntriesFrom(input, _repeated_objDeleted_codec);
            break;
          }
          case 106: {
            skillObjBorn_.AddEntriesFrom(input, _repeated_skillObjBorn_codec);
            break;
          }
          case 114: {
            skillObjMove_.AddEntriesFrom(input, _repeated_skillObjMove_codec);
            break;
          }
          case 122: {
            skillObjDeleted_.AddEntriesFrom(input, _repeated_skillObjDeleted_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
